# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Database Test

on:
  push:
    branches: [ main, 'develop*' ]
  pull_request:
    branches: [ main ]

jobs:
  test-database:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install SQLite
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3
        sqlite3 --version
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create test database and run migrations
      run: |
        # Set test database path
        echo "DATABASE_URL=file:./test.db" > .env.test
        
        # Generate Prisma client
        npx prisma generate
        
        # Run migrations to create database and schema
        DATABASE_URL=file:./test.db npx prisma migrate deploy

    - name: Seed database with data for testing
      run: |
        # Seed the database with data for testing
        DATABASE_URL=file:./test.db node prisma/seed.js

    - name: Verify database table names
      run: |
          # First check what tables actually exist
          echo "Tables in the database:"
          sqlite3 test.db "SELECT name FROM sqlite_master WHERE type='table';"
        
          - name: Verify database setup
          run: |
            # Print the current directory
            echo "Current directory:"
            pwd
            
            # List files to see if the database file exists
            echo "Database files:"
            ls -la *.db
            
            # Check if the database has any tables at all
            echo "All tables in database:"
            sqlite3 test.db "SELECT name FROM sqlite_master WHERE type='table';"
            
            # Print environment variable
            echo "DATABASE_URL=$DATABASE_URL"
            
            # Try with explicit path
            echo "Using explicit path to database:"
            DATABASE_URL=file:./test.db node -e "
              const { PrismaClient } = require('@prisma/client');
              const prisma = new PrismaClient();
              async function check() {
                try {
                  const tables = await prisma.$queryRaw\`SELECT name FROM sqlite_master WHERE type='table'\`;
                  console.log('Tables via Prisma:', tables);
                  const recipeCount = await prisma.recipe.count();
                  console.log('Recipe count:', recipeCount);
                } catch (e) {
                  console.error('Error:', e);
                } finally {
                  await prisma.$disconnect();
                }
              }
              check();
            "